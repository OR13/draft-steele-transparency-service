



Network Working Group                                          O. Steele
Internet-Draft                                           23 January 2024
Intended status: Informational                                          
Expires: 26 July 2024


                          Transparency Service
                draft-steele-transparency-service-latest

Abstract

   This document describes an http service and interaction patterns for
   obtaining receipts for signatures, that can be used to provide
   transparency.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://OR13.github.io/draft-steele-transparency-service/draft-
   steele-transparency-service.html.  Status information for this
   document may be found at https://datatracker.ietf.org/doc/draft-
   steele-transparency-service/.

   Source for this draft and an issue tracker can be found at
   https://github.com/OR13/draft-steele-transparency-service.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 26 July 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Messages
     3.1.  Opaque Signature
     3.2.  Receipt
     3.3.  Transparent Signature
   4.  Message Identifiers
   5.  Operations
     5.1.  Register Opaque Signature
     5.2.  Request Receipt
     5.3.  Attach Receipt
     5.4.  Detach Receipt
     5.5.  Verify Opaque Signature
     5.6.  Verify Receipt
     5.7.  Verify Transparent Signature
     5.8.  Verify Issuer
     5.9.  Verify Message By Name
   6.  HTTP API
     6.1.  Register Opaque Signature
     6.2.  Request Receipt
     6.3.  Verify Issuer
     6.4.  Verify Message By Name
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   Transparency Services have been adopted for use cases including
   [RFC9162], [I-D.draft-ietf-keytrans-architecture],
   [I-D.draft-ietf-scitt-architecture].

   This document describes a generic COSE and HTTP based service, which
   can be applied to any use case that build on top of HTTP and COSE.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The terms "cose-sign1" and "cose-key" are defined in [RFC9052].

   issuer:  A name for the entity that produces a cose-sign1.

   opaque-signature:  A cose-sign1 as decribed in [RFC9052].

   receipt:  A cose-sign1, with an inclusion, consistency or other proof
      type as described in [I-D.draft-ietf-cose-merkle-tree-proofs].

   transparent-signature:  A cose-sign1, opaque-signature, with one or
      more receipts included in its unprotected header.

   notary:  A name for the entity that produces a receipt.  A notary is
      an issuer of receipts.

3.  Messages

   This section describes the conceptual messages supported by
   transparency services.

   Each message is a cose-sign1, and MAY be described with the media
   type application/cose; cose-type="cose-sign1" as defined in
   [RFC9052].

   To provide additional clarity, we define new media types for each
   conceptual message.

3.1.  Opaque Signature

   An opaque signature MUST be a cose-sign1 produced according to
   [RFC9052].

   The unprotected header MAY contain arbitrary data, as described in
   Section 3 of [RFC9052].

   The payload MAY be detached, as described in Section 4.1 of
   [RFC9052].

   There are no changes to the protected header requirements described
   in Section 4 of [RFC9052].

   The media type application/opaque-signature+cose SHOULD be used to
   distinguish opaque signatures from other forms of cose-sign1.

3.2.  Receipt

   A receipt MUST be a cose-sign1 produced according to [RFC9052].

   The unprotected header MAY contain arbitrary data, as described in
   Section 3 of [RFC9052].

   The unprotected header MUST include an a proof as described in
   [I-D.draft-ietf-cose-merkle-tree-proofs].

   The payload MAY be detached, as described in Section 4.1 of
   [RFC9052].

   There are no changes to the protected header requirements described
   in Section 4 of [RFC9052], and
   [I-D.draft-ietf-cose-merkle-tree-proofs].

   The media type application/receipt+cose SHOULD be used to distinguish
   receipts from other forms of cose-sign1.

3.3.  Transparent Signature

   A transparent signature MUST be a cose-sign1 produced according to
   [RFC9052].

   The unprotected header MAY contain arbitrary data, as described in
   Section 3 of [RFC9052].

   The unprotected header MUST include an a receipt as described in this
   document.

   The payload MAY be detached, as described in Section 4.1 of
   [RFC9052].

   There are no changes to the protected header requirements described
   in Section 4 of [RFC9052], and this document.

   The media type application/transparent-signature+cose SHOULD be used
   to distinguish transparent signatures from other forms of cose-sign1.

4.  Message Identifiers

   This section describes deterministic names for the conceptual
   messages described in the previous section, and one new message type
   "payload" which is defined in [RFC9052].

   The following URI template is used produce URNs:

   urn:ietf:params:{wg}:\
   {message-type}:\
   {hash-name}:{base-encoding}:\
   {base64url-encoded-bytes-digest}

   wg MUST be the name of an IETF Working Group.

   message-type MUST be payload, opaque-signature, receipt, or
   transparent-signature.

   hash-name MUST be sha-256.

   base-encoding MUST be base64url.

   base64url-encoded-bytes-digest MUST be the the base64url encoded
   sha-256 digest of the payload, opaque-signature, receipt, or
   transparent-signature.

   Note that this identifier scheme is sensitive to changes in the
   unprotected header and signature of the cose-sign1.

   The following informative examples are provided:

   urn:ietf:params:cose:payload\
   :sha-256:base64url:5i6UeRzg1...qnGmr1o
   urn:ietf:params:cose:opaque-signature\
   :sha-256:base64url:5i6UeRzg1...qnGmr1o
   urn:ietf:params:cose:receipt\
   :sha-256:base64url:5i6UeRzg1...qnGmr1o
   urn:ietf:params:cose:transparent-signature\
   :sha-256:base64url:5i6UeRzg1...qnGmr1o

                           Figure 1: URN Examples

   Implementations MAY choose to shorten these identifiers by replacing
   the middle sections of these URNs, for example
   ietf:params:cose:opaque-signature:sha-256:base64url, with a vendor
   specific URL safe string.

   The following informative examples are provided:

   urn:payload.vendor.example:5i6UeRzg1...qnGmr1o
   urn:opaque.vendor.example:5i6UeRzg1...qnGmr1o
   urn:receipt.vendor.example:5i6UeRzg1...qnGmr1o
   urn:transparent.vendor.example:5i6UeRzg1...qnGmr1o

                       Figure 2: Vendor URN Examples

   Implementations are cautioned that these vendor specific identifiers
   cannot be understood globablly.

   Identifiers MAY be prefixed with a URL base, such as
   https://vendor.example.

   For example:

   https://vendor.example/urn:...:5i6UeRzg1...qnGmr1o

                           Figure 3: URL Examples

   These identifiers MAY be used as values for opaque-signature-
   reference, receipt-reference, transparent-signature-reference, which
   are produced and consumed in the Operations section of this document.

5.  Operations

   This section describes the operations associated with the conceptual
   messages described in this document.

   Each operation is defined in terms on consuming inputs and producing
   outputs.

   The operations defined in this section are abstract, but a concrete
   HTTP API for them is provided in Section TBD of this document.

5.1.  Register Opaque Signature

   The register opaque signature operation takes an opaque-signature as
   input and produces a receipt, or receipt-reference as output.

   Concrete instantiations of this operation MUST return a receipt-
   reference in case a receipt cannot be produced in under 100 seconds.

5.2.  Request Receipt

   The request receipt operation takes an receipt-reference as input and
   produces a receipt as output.

   Concrete instantiations of this operation MUST return a receipt-
   reference in case a receipt cannot be produced in under 100 seconds.

5.3.  Attach Receipt

   The attach receipt operation takes an (opaque-signature or
   transparent-signature) and receipt as input and produces a
   transparent-signature, or transparent-signature-reference as output.

   Concrete instantiations of this operation MUST be synchronous, and
   cannot exceed 100 seconds to complete.

5.4.  Detach Receipt

   The detach receipt operation takes a transparent-signature, and index
   number as input and produces an (opaque-signature, transparent-
   signature, or transparent-signature-reference) as output.

   Concrete instantiations of this operation MUST be synchronous, and
   cannot exceed 100 seconds to complete.

5.5.  Verify Opaque Signature

   The verify opaque signature operation takes an opaque-signature, and
   optional payload as input and produces a boolean value true if the
   signature verifies as decribed in Section 4.4 of [RFC9052].

   The payload MUST be included for detached payload cose-sign1 and MUST
   NOT be included for attached payload cose-sign1, see Section 2 of
   [RFC9052] for detached regarding detached content.

   Note that no public key or certificate is provided as input, because
   the verification key must be discoverable from the details of the
   protected header.

   Key discovery, distribution, resolution and dereferencing are out of
   scope for this document.

5.6.  Verify Receipt

   The verify receipt operation takes an optional payload, opaque-
   signature and a receipt as input and produces a boolean value true if
   the following succeed and false otherwise:

   *  Verify Opaque Signature MUST return true for the opaque-signature.

   *  Verify Proof MUST return true for all proofs inside the receipt
      unprotected header.

   *  Verify must return true for the receipt, as described in
      Section 4.4 of [RFC9052].

   The payload MUST be included for detached payload cose-sign1 and MUST
   NOT be included for attached payload cose-sign1, see Section 2 of
   [RFC9052] for detached regarding detached content.

   Note that no public key or certificate is provided as input, because
   the verification key must be discoverable from the details of the
   protected headers.

   Key discovery, distribution, resolution and dereferencing are out of
   scope for this document.

5.7.  Verify Transparent Signature

   The verify transparent signature operation takes an optional payload
   and transparent-signature as input and produces a boolean true as
   output when the following succeed and false otherwise:

   For each receipt in the transparent-signature the Verify Receipt
   operation MUST return true.

   The payload MUST be included for detached payload cose-sign1 and MUST
   NOT be included for attached payload cose-sign1, see Section 2 of
   [RFC9052] for detached regarding detached content.

   Note that no public key or certificate is provided as input, because
   the verification key must be discoverable from the details of the
   protected headers.

   Key discovery, distribution, resolution and dereferencing are out of
   scope for this document.

5.8.  Verify Issuer

   The verify issuer operation takes an identifier for the issuer as
   input, and produces a set of verification keys for the issuer as
   output.

   Producing an empty set of verification keys MUST be interpretted as
   the issuer being untrusted, and not verified.

   The content type of the output MUST be a registered media type in
   [IANA.media-types].

   This operation MAY be called on issuers or notaries.

5.9.  Verify Message By Name

   The verify message by name operation takes an identifier for a
   message (opaque-signature-reference, receipt-reference, transparent-
   signature-reference) and an optional payload as input and produces a
   boolean true or false as output.

   This operation requires the provider to be able to resolve a given
   identifier to a message, and then apply the Verify Opaque Signature,
   Verify Receipt or Verify Transparent Signature operations.

6.  HTTP API

   This section proposes concrete http endpoints for the operations
   described in the previous section.

6.1.  Register Opaque Signature

   Request:

   NOTE: '\' line wrapping per RFC 8792

   POST /register/opaque-signature HTTP/1.1
   Host: transparency.service.example
   Content-Type: \
     application/opaque-signature+cose
   Body (in CBOR diagnostic notation):

   18(                                 / COSE Sign 1                   /
       [
         h'a4013822...3a343536',       / Protected Header              /
         {},                           / Unprotected Header            /
         nil,                          / Detached Payload              /
         h'4be77803...65c72b2a'        / Signature                     /
       ]
   )

   Response:

   NOTE: '\' line wrapping per RFC 8792

   HTTP/1.1 200 Ok
   Content-Type: \
     application/json
   Body:
   {
     "receipt": "https://transparency.service.example/receipts\
     /urn:ietf:params:cose:opaque-signature\
     :sha-256:base64url:5i6UeRzg1...qnGmr1o"
   }

6.2.  Request Receipt

   Request:

   NOTE: '\' line wrapping per RFC 8792

   GET /receipts/urn:...opaque-signature...:5i6UeRzg1...qnGmr1o HTTP/1.1
   Host: transparency.service.example
   Accept: \
     application/receipt+cose

   Response:

   NOTE: '\' line wrapping per RFC 8792

   HTTP/1.1 200 Ok
   Content-Type: \
     application/receipt+cose
   Body (in CBOR diagnostic notation):

   18(                                 / COSE Sign 1                   /
       [
         h'a4013822...3a616263',       / Protected                     /
         {                             / Unprotected                   /
           TBD: {                      / Proofs                        /
             -1: [                     / Inclusion proofs (1)          /
               h'83040382...8628a031', / Inclusion proof 1             /
             ]
           },
         },
         h'',                          / Detached payload              /
         h'15280897...93ef39e5'        / Signature                     /
       ]
   )

6.3.  Verify Issuer

   Request:

   NOTE: '\' line wrapping per RFC 8792

   GET /issuer/vendor.example HTTP/1.1
   Host: transparency.service.example
   Accept: \
     application/jwk-set+json

   Response:

   NOTE: '\' line wrapping per RFC 8792

   HTTP/1.1 200 Ok
   Content-Type: \
     application/jwk-set+json
   Body:

   {
     "keys": [
       {
         "kid": "urn:ietf:params:oauth:jwk-thumbprint:sha-256:Nz2...sXs"
         "kty": "EC",
         "crv": "P-256",
         "alg": "ES256",
         "x": "MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4",
         "y": "4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM"
         "x5t": "NTBGNTJEMDc3RUE3RUVEO...yOTY5NDNGOUQ4OEU5OA",
         "x5c": [
           "MIIDCzCCAfOgAwIBAgIJA...iwiJS+u/nSYvqCFt57+g3R+"
         ]
       }
     ]
   }

6.4.  Verify Message By Name

   Request:

   NOTE: '\' line wrapping per RFC 8792

   POST /verify/references HTTP/1.1
   Host: transparency.service.example
   Content-Type: \
     application/json
   Body:
   {
     "payload": "urn:ietf:params:cose:payload\
     :sha-256:base64url:5i6UeRzg1...qnGmr1o",
     "transparent-signature": "urn:ietf:params\
     :cose:transparent-signature\
     :sha-256:base64url:5i6UeRzg1...qnGmr1o"
   }

   Response:

   NOTE: '\' line wrapping per RFC 8792

   HTTP/1.1 200 Ok
   Content-Type: \
     application/json
   Body:
   {
     "verified": true
   }

7.  Security Considerations

   TODO Security

8.  IANA Considerations

   TODO Request Registration of Media Types

9.  References

9.1.  Normative References

   [I-D.draft-ietf-cose-merkle-tree-proofs]
              Steele, O., Birkholz, H., Delignat-Lavaud, A., and C.
              Fournet, "Concise Encoding of Signed Merkle Tree Proofs",
              Work in Progress, Internet-Draft, draft-ietf-cose-merkle-
              tree-proofs-03, 11 December 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-cose-
              merkle-tree-proofs-03>.

   [IANA.media-types]
              IANA, "Media Types",
              <http://www.iana.org/assignments/media-types>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9052]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Structures and Process", STD 96, RFC 9052,
              DOI 10.17487/RFC9052, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9052>.

9.2.  Informative References

   [I-D.draft-ietf-keytrans-architecture]
              McMillion, B., "Key Transparency Architecture", Work in
              Progress, Internet-Draft, draft-ietf-keytrans-
              architecture-00, 18 January 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              keytrans-architecture-00>.

   [I-D.draft-ietf-scitt-architecture]
              Birkholz, H., Delignat-Lavaud, A., Fournet, C., Deshpande,
              Y., and S. Lasker, "An Architecture for Trustworthy and
              Transparent Digital Supply Chains", Work in Progress,
              Internet-Draft, draft-ietf-scitt-architecture-04, 23
              October 2023, <https://datatracker.ietf.org/doc/html/
              draft-ietf-scitt-architecture-04>.

   [RFC9162]  Laurie, B., Messeri, E., and R. Stradling, "Certificate
              Transparency Version 2.0", RFC 9162, DOI 10.17487/RFC9162,
              December 2021, <https://www.rfc-editor.org/rfc/rfc9162>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Orie Steele
   Email: orie@or13.io
